<?php

namespace Tests\Feature\Http\Controllers;

use Tests\TestCase;

/**
 * @see \App\Http\Controllers\BonusController
 */
class BonusControllerTest extends TestCase
{
    /**
     * @test
     */
    public function bonus_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('bonus'));

        $response->assertOk();
        $response->assertViewIs('bonus.index');
        $response->assertViewHas('userbon');
        $response->assertViewHas('dying');
        $response->assertViewHas('legendary');
        $response->assertViewHas('old');
        $response->assertViewHas('huge');
        $response->assertViewHas('large');
        $response->assertViewHas('regular');
        $response->assertViewHas('participant');
        $response->assertViewHas('teamplayer');
        $response->assertViewHas('committed');
        $response->assertViewHas('mvp');
        $response->assertViewHas('legend');
        $response->assertViewHas('total');
        $response->assertViewHas('daily');
        $response->assertViewHas('weekly');
        $response->assertViewHas('monthly');
        $response->assertViewHas('yearly');
        $response->assertViewHas('username');
        $response->assertViewHas('minute');
        $response->assertViewHas('second');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function exchange_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('bonus_exchange', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors('Bonus Exchange Failed!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function gift_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('bonus_gift'));

        $response->assertOk();
        $response->assertViewIs('bonus.gift');
        $response->assertViewHas('userbon');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function gifts_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('bonus_gifts'));

        $response->assertOk();
        $response->assertViewIs('bonus.gifts');
        $response->assertViewHas('user');
        $response->assertViewHas('gifttransactions');
        $response->assertViewHas('userbon');
        $response->assertViewHas('gifts_sent');
        $response->assertViewHas('gifts_received');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function send_gift_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('bonus_send_gift'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors('Unable to find specified user'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('bonus_store'));

        $response->assertOk();
        $response->assertViewIs('bonus.store');
        $response->assertViewHas('users');
        $response->assertViewHas('userbon');
        $response->assertViewHas('activefl');
        $response->assertViewHas('bontransactions');
        $response->assertViewHas('uploadOptions');
        $response->assertViewHas('downloadOptions');
        $response->assertViewHas('personalFreeleech');
        $response->assertViewHas('invite');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function tip_poster_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('tip_poster', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors('You Are To Broke To Tip The Poster!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function tip_uploader_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('tip_uploader', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors('Your To Broke To Tip The Uploader!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function tips_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('bonus_tips'));

        $response->assertOk();
        $response->assertViewIs('bonus.tips');
        $response->assertViewHas('user');
        $response->assertViewHas('bontransactions');
        $response->assertViewHas('userbon');
        $response->assertViewHas('tips_sent');
        $response->assertViewHas('tips_received');

        // TODO: perform additional assertions
    }

    // test cases...
}
