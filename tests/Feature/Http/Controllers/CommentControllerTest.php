<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\CommentController
 */
class CommentControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function article_returns_an_ok_response()
    {
$this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

$comment = factory(\App\Models\Comment::class)->create();
$user = factory(\App\Models\User::class)->create();

$response = $this->actingAs($user)->post(route('comment_article', ['id' => $comment->id]), [
            // TODO: send request data
        ]);

$response->assertRedirect(withErrors('Your Comment Rights Have Been Revoked!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_comment_returns_an_ok_response()
    {
$this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

$comment = factory(\App\Models\Comment::class)->create();
$user = factory(\App\Models\User::class)->create();

$response = $this->actingAs($user)->get(route('comment_delete', ['comment_id' => $comment->comment_id]));

$response->assertRedirect(withSuccess('Comment Has Been Deleted.'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_comment_returns_an_ok_response()
    {
$this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

$comment = factory(\App\Models\Comment::class)->create();
$user = factory(\App\Models\User::class)->create();

$response = $this->actingAs($user)->post(route('comment_edit', ['comment_id' => $comment->comment_id]), [
            // TODO: send request data
        ]);

$response->assertRedirect(withSuccess('Comment Has Been Edited.'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function playlist_returns_an_ok_response()
    {
$this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

$comment = factory(\App\Models\Comment::class)->create();
$user = factory(\App\Models\User::class)->create();

$response = $this->actingAs($user)->post(route('comment_playlist', ['id' => $comment->id]), [
            // TODO: send request data
        ]);

$response->assertRedirect(withErrors('Your Comment Rights Have Been Revoked!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function quickthanks_returns_an_ok_response()
    {
$this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

$comment = factory(\App\Models\Comment::class)->create();
$user = factory(\App\Models\User::class)->create();

$response = $this->actingAs($user)->get(route('comment_thanks', ['id' => $comment->id]));

$response->assertRedirect(withErrors('Your Comment Rights Have Been Revoked!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function request_returns_an_ok_response()
    {
$this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

$comment = factory(\App\Models\Comment::class)->create();
$user = factory(\App\Models\User::class)->create();

$response = $this->actingAs($user)->post(route('comment_request', ['id' => $comment->id]), [
            // TODO: send request data
        ]);

$response->assertRedirect(withErrors('Your Comment Rights Have Been Revoked!'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function torrent_returns_an_ok_response()
    {
$this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

$comment = factory(\App\Models\Comment::class)->create();
$user = factory(\App\Models\User::class)->create();

$response = $this->actingAs($user)->post(route('comment_torrent', ['id' => $comment->id]), [
            // TODO: send request data
        ]);

$response->assertRedirect(withErrors('Your Comment Rights Have Been Revoked!'));

        // TODO: perform additional assertions
    }

    // test cases...
}
