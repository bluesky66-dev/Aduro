<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\BookmarkController
 */
class BookmarkControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $bookmark = factory(\App\Models\Bookmark::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->delete(route('bookmarks.destroy', ['id' => $bookmark->id]));

        $response->assertRedirect(withSuccess('Torrent Has Been Unbookmarked Successfully!'));
        $this->assertDeleted($bookmarks);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $bookmark = factory(\App\Models\Bookmark::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('bookmarks.index', ['username' => $bookmark->username]));

        $response->assertOk();
        $response->assertViewIs('user.bookmarks');
        $response->assertViewHas('user');
        $response->assertViewHas('personal_freeleech');
        $response->assertViewHas('bookmarks');
        $response->assertViewHas('route');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $bookmark = factory(\App\Models\Bookmark::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('bookmarks.store', ['id' => $bookmark->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(withErrors('Torrent has already been bookmarked.'));

        // TODO: perform additional assertions
    }

    // test cases...
}
